#!/bin/sh
#/etc/init.d/tedge-mapper-collectd: tedge-mapper-collectd converts Thin Edge JSON measurements to Cumulocity JSON format

### BEGIN INIT INFO
# Provides:          tedge-mapper-collectd
# Short-Description: tedge-mapper-collectd converts Thin Edge JSON measurements to Cumulocity JSON format
# Required-Start:    $all
# Required-Stop:     $all
# Should-Start:      
# Should-Stop:       
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO

# shellcheck disable=SC1090
# shellcheck disable=SC1091

set -e

PATH=/bin:/usr/bin:/sbin:/usr/sbin

test -x "/usr/bin/tedge-mapper" || exit 0

# For configuration of the init script use the file
# /etc/default/tedge-mapper-collectd, do not edit this init script.

# Set run_service to 1 to start tedge-mapper-collectd or 0 to disable it.
run_service=1

DAEMON_ARGS="collectd"
DAEMON_USER="tedge"

export TEDGE_RUN_LOCK_FILES="false"

[ -e "/etc/default/tedge-mapper-collectd" ] && . "/etc/default/tedge-mapper-collectd"

DAEMON=/usr/bin/tedge-mapper
PIDFILE=/var/run/tedge-mapper-collectd.pid

STOP_RETRY_SCHEDULE='TERM/30/KILL/1'

. /etc/init.d/functions

# Mock Debian stuff
log_begin_msg() {
	printf "%s" "$*"
}

log_end_msg() {
    if [ "$1" = "0" ]; then
        echo 'done'
    else
        echo 'error'
    fi
}

log_daemon_msg() {
    echo "$*"
}

log_progress_msg() {
    echo "$*"
}

do_start() {
	if [ $run_service = 1 ]
    then
		log_begin_msg "Starting tedge-mapper-collectd daemon..."
		start-stop-daemon --start --quiet --oknodo --background --make-pidfile --pidfile "$PIDFILE" --chuid "${DAEMON_USER}" --user "${DAEMON_USER}" \
				--exec "$DAEMON" -- $DAEMON_ARGS
		log_end_msg $?
    fi
}

do_stop() {
	if [ $run_service = 1 ]
    then
		log_begin_msg "Stopping tedge-mapper-collectd daemon..."
		# start-stop-daemon --stop --quiet --oknodo --retry $STOP_RETRY_SCHEDULE \
		# 	--pidfile "$PIDFILE" --user "${DAEMON_USER}"
		# log_end_msg $?
		# rm -f "${PIDFILE}"

		if start-stop-daemon --stop --quiet --oknodo --pidfile "${PIDFILE}" --user "${DAEMON_USER}"; then
			log_end_msg 0
			rm -f "${PIDFILE}"
		else
			log_end_msg 1
		fi
    fi
}

case "$1" in
  start)
	do_start
    ;;

  stop)
    do_stop
    ;;

  restart)
	do_stop
	do_start
    ;;

  try-restart|force-reload)
  	if [ $run_service = 0 ]; then exit 0; fi
    log_daemon_msg "Restarting tedge-mapper-collectd"
	# force-reload is the same as reload or try-restart according
	# to its definition, the reload is not implemented here, so
	# force-reload is the alias of try-restart here, but it should
	# be the alias of reload if reload is implemented.
	#
	# Only start the service when do_stop succeeds
	do_stop && do_start
	;;

  status)
    status "$DAEMON"
    ;;

  *)
    echo "Usage: /etc/init.d/tedge-mapper-collectd {start|stop|status|restart|try-restart|force-reload}" >&2
    exit 1

esac

exit 0