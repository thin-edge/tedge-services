#!/bin/sh
set -e

# Support loading settings from file
# this allows users to control which service manager is used by default
# to disable auto detection.
if [ -f /etc/tedgectl/env ]; then
    # shellcheck disable=SC1091
    . /etc/tedgectl/env
fi

system_command_exists() {
    # Note: system commands might not be in the path for a non-root
    # user, e.g. under /sbin and /usr/sbin. This may result in some false
    # negatives. Use a modified path when checking the existence for
    # more consistent results
	PATH="$PATH:/sbin:/usr/sbin" command -v "$@" > /dev/null 2>&1
}

call_shutdown_or_reboot() {
    # Note: shutdown is not always available (e.g. Alpine Linux only has shutdown)
    if system_command_exists shutdown; then
        shutdown -r now
    else
        reboot
    fi
}

strip_service_suffix() {
    # Note: only systemd users suffixes like .service, .target which are incompatible
    # with other init systems, but be loud about the conversion (as it could be unexpected)
    output="${1%.*}"
    if [ "$1" != "$output" ]; then
        echo "Normalizing '$1' to '$output'" >&2
    fi
    echo "$output"
}

#
# Detect service manager
#
SERVICE_MANAGER="${SERVICE_MANAGER:-}"
if [ -z "$SERVICE_MANAGER" ]; then
    if system_command_exists systemctl; then
        SERVICE_MANAGER="systemd"
    elif system_command_exists rc-service; then
        SERVICE_MANAGER="openrc"
    elif system_command_exists update-rc.d; then
        SERVICE_MANAGER="sysvinit"
    elif [ -f /command/s6-rc ]; then
        SERVICE_MANAGER="s6_overlay"
    elif system_command_exists runsv; then
        SERVICE_MANAGER="runit"
    elif system_command_exists supervisorctl; then
        SERVICE_MANAGER="supervisord"
    else
        echo "Could not detect the init system. Only openrc,runit,systemd,sysvinit,s6_overlay,supervisord are supported" >&2
        exit 1
    fi
fi

manage_systemd() {
    command="$1"
    name="$2"
    case "$command" in
        is_available) systemctl status ;;
        start) systemctl start "$name";;
        stop) systemctl stop "$name";;
        restart) systemctl restart "$name";;
        enable) systemctl enable "$name" ;;
        disable) systemctl disable "$name" ;;
        status) systemctl status "$name" ;;
        is_active) systemctl is-active "$name" ;;
        restart_device)
            systemctl reboot
            ;;
        *) echo "[$SERVICE_MANAGER] Unsupported command. command=$command"; exit 1 ;;
    esac
}

manage_openrc() {
    command="$1"
    name=$(strip_service_suffix "$2")
    case "$command" in
        # is_available) rc-service -l ;;
        is_available) rc-status --all ;;
        start) rc-service "$name" start ;;
        stop) rc-service "$name" stop ;;
        restart) rc-service "$name" restart ;;
        enable) rc-update add "$name" ;;
        disable) rc-update delete "$name" ;;
        is_active|status) rc-service "$name" status ;;
        restart_device)
            call_shutdown_or_reboot
            ;;
        *) echo "[$SERVICE_MANAGER] Unsupported command. command=$command"; exit 1 ;;
    esac
}

manage_sysvinit() {
    command="$1"
    name=$(strip_service_suffix "$2")
    case "$command" in
        is_available)
            # service --status-all does not run on some systems (e.g. older yocto versions)
            if command -V pidof >/dev/null 2>&1; then
                # sysvinit can be either called using /sbin/init or /init
                [ "$(pidof /sbin/init)" = "1" ] || [ "$(pidof init)" = "1" ]
            elif [ "$(cat /proc/1/comm)" = "init" ]; then
                exit 0
            elif command -V grep >/dev/null 2>&1; then
                /sbin/init --version | grep -qi sysv
            else
                /sbin/init --version >/dev/null
            fi
            ;;
        start)
            if command -V service >/dev/null 2>&1; then
                service "$name" start
            else
                "/etc/init.d/$name" start
            fi
            ;;
        stop)
            if command -V service >/dev/null 2>&1; then
                service "$name" stop
            else
                "/etc/init.d/$name" stop
            fi
            ;;
        restart)
            if command -V service >/dev/null 2>&1; then
                service "$name" restart
            else
                # Use stop then start as some services the pid file
                # does not get deleted quick enough before starting, which results in the start failing.
                # This problem was observed on an opto-22 device when restarting mosquitto
                "/etc/init.d/$name" stop
                sleep 1
                "/etc/init.d/$name" start
            fi
            ;;
        enable)
            update-rc.d "$name" defaults

            # Not all sysvinit systems support the enable/disable command
            update-rc.d "$name" enable 2>/dev/null ||:
            ;;
        disable)
            # Not all sysvinit systems support the enable/disable command
            update-rc.d "$name" disable 2>/dev/null ||:

            update-rc.d -f "$name" remove 2>/dev/null ||:
            ;;
        is_active|status)
            if command -V service >/dev/null 2>&1; then
                service "$name" status
            else
                "/etc/init.d/$name" status
            fi
            ;;
        restart_device)
            call_shutdown_or_reboot
            ;;
        *) echo "[$SERVICE_MANAGER] Unsupported command. command=$command"; exit 1 ;;
    esac
}

manage_s6_overlay() {
    command="$1"
    name=$(strip_service_suffix "$2")
    case "$command" in
        is_available) /command/s6-rc list ;;
        start) /command/s6-rc start "$name" ;;
        stop) /command/s6-rc stop "$name" ;;
        restart)
            # Note: if a service is not already running then it should be simply started as
            # "s6-svc -r" as no affect if the service is not already running
            if [ -f "/run/service/$name/down" ]; then
                # Service is not already running, so just start it
                /command/s6-rc start "$name"
            else
                # Restart an already running service by sending it a signal (via s6-svc)
                /command/s6-svc -r "/run/service/$name"
            fi
            ;;
        enable) /command/s6-rc start "$name" ;;
        disable) /command/s6-rc stop "$name" ;;
        is_active|status)
            if [ -f "/run/service/$name/down" ]; then
                # Not active
                exit 1
            fi
            ;;
        restart_device)
            /run/s6/basedir/bin/reboot
            ;;
        *) echo "[$SERVICE_MANAGER] Unsupported command. command=$command"; exit 1 ;;
    esac
}

manage_supervisord() {
    command="$1"
    name=$(strip_service_suffix "$2")

    case "$command" in
        is_available) supervisorctl status >/dev/nul 2>&1 ;;
        start) supervisorctl start "$name" ;;
        stop) supervisorctl stop "$name" ;;
        restart) supervisorctl restart "$name" ;;
        enable) supervisorctl add "$name" ;;
        disable) supervisorctl remove "$name" ;;
        is_active|status) supervisorctl status "$name";;
        restart_device)
            call_shutdown_or_reboot
            ;;
        *) echo "[$SERVICE_MANAGER] Unsupported command. command=$command"; exit 1 ;;
    esac
}

manage_runit() {
    command="$1"
    name=$(strip_service_suffix "$2")
    export SVDIR="${SVDIR:-/etc/service}"
    RUNIT_SRCDIR="${RUNIT_SRCDIR:-/etc/runit}"

    case "$command" in
        is_available)
            if command -V pgrep >/dev/null 2>&1; then
                pgrep -P 1 -a | grep runsv
            else
                grep -q runsvdir /proc/1/comm
            fi
            ;;
        start) sv start "$name" ;;
        stop) sv stop "$name" ;;
        restart) sv restart "$name" ;;
        enable)
            if [ ! -d "$SVDIR/$name" ]; then
                ln -s "$RUNIT_SRCDIR/$name" "$SVDIR"
            fi
            # Remove file (if it exists)
            rm -f "$RUNIT_SRCDIR/$name/down"
            ;;
        disable)
            if [ -d "$RUNIT_SRCDIR/$name" ]; then
                touch "$RUNIT_SRCDIR/$name/down"
            fi
            ;;
        is_active|status) sv status "$name" ;;
        restart_device)
            call_shutdown_or_reboot
            ;;
        *) echo "[$SERVICE_MANAGER] Unsupported command. command=$command"; exit 1 ;;
    esac
}

SUPPORTED_INIT_SYSTEMS="openrc,runit,systemd,sysvinit,s6_overlay,supervisord"
supported_init_systems() {
    echo "Unknown init system. Only $SUPPORTED_INIT_SYSTEMS are supported" >&2
}

usage() {
    cat <<EOT
Multi init system helper for users with little experience about the differences between the
different init systems/service managers.

The cli detect which init system is being used on the machine, and maps the commands to the appropriate
init system cli command.

If something does not work, then please create a ticket under https://github.com/thin-edge/tedge-services

Supported Init Systems / Service Managers:
  
  $SUPPORTED_INIT_SYSTEMS

SUBCOMMANDS

  is_available          Check if init system is available
  restart_device        Restart device

SERVICE ACTIONS

  start <SERVICE>       Start service
  stop <SERVICE>        Stop service
  restart <SERVICE>     Restart service
  enable <SERVICE>      Enable service
  disable <SERVICE>     Disable service
  is_active <SERVICE>   Check if service is active
  status <SERVICE>      Check if service is active (alias for is_active)

EXAMPLES

  $0 restart tedge-agent
  # Restart the tedge-agent service

  $0 enable tedge-agent
  # Enable the tedge-agent service so that it automatically starts after a reboot

  $0 restart_device
  # Restart the device
EOT
}

##############################
# Main
##############################
COMMAND=
if [ $# -eq 0 ]; then
    echo "ERROR: Missing required argument" >&2
    usage
    exit 1
fi

COMMAND="$1"
shift

if [ $# -eq 0 ]; then
    #
    # Non-service based commands like restart_device, is_available
    #
    case "$SERVICE_MANAGER" in
        systemd)
            manage_systemd "$COMMAND"
            ;;
        openrc)
            manage_openrc "$COMMAND"
            ;;
        sysvinit)
            manage_sysvinit "$COMMAND"
            ;;
        s6_overlay)
            manage_s6_overlay "$COMMAND"
            ;;
        runit)
            manage_runit "$COMMAND"
            ;;
        supervisord)
            manage_supervisord "$COMMAND"
            ;;
        *)
            supported_init_systems
            exit 1
            ;;
    esac
    exit 0
fi

#
# Service commands, where multiple services can be given and the same action will be performed on all of them
#
case "$SERVICE_MANAGER" in
    systemd)
        while [ $# -gt 0 ]; do
            manage_systemd "$COMMAND" "$1"
            shift
        done
        ;;
    openrc)
        while [ $# -gt 0 ]; do
            manage_openrc "$COMMAND" "$1"
            shift
        done
        ;;
    sysvinit)
        while [ $# -gt 0 ]; do
            manage_sysvinit "$COMMAND" "$1"
            shift
        done
        ;;
    s6_overlay)
        while [ $# -gt 0 ]; do
            manage_s6_overlay "$COMMAND" "$1"
            shift
        done
        ;;
    runit)
        while [ $# -gt 0 ]; do
            manage_runit "$COMMAND" "$1"
            shift
        done
        ;;
    supervisord)
        while [ $# -gt 0 ]; do
            manage_supervisord "$COMMAND" "$1"
            shift
        done
        ;;
    *)
        supported_init_systems
        exit 1
        ;;
esac
